{"version":3,"file":"grechabuf.min.cjs","sources":["../../grechabuf.ts"],"sourcesContent":["export interface FieldSerializeResult<T> {\n    data: T,\n    length: number\n}\n\nexport interface Field<T> {\n    /**\n     * Apoximated bytes length\n     *\n     * @param view {DataView} data view\n     * @param position {number} AKA offset\n     *\n     * @returns {number} minimal field length\n     */\n    size(view?: DataView, position?: number): number\n\n    /**\n     * Serialize field\n     *\n     * @param view {DataView} data view\n     * @param position {number} AKA offset\n     * @param value {T} value to serialize\n     *\n     * @returns {number} size of written field\n     */\n    serialize(view: DataView, position: number, value: T): number\n\n    /**\n     * Deserialize field\n     *\n     * @param view {DataView} data view\n     * @param position {number} AKA offset\n     *\n     * @returns {number} size of written field\n     */\n    deserialize(view: DataView, position: number): FieldSerializeResult<T>\n}\n\ntype Fields = Record<string, Field<any>>\n\ntype InferFieldsValues<T extends Fields> = {\n    [K in keyof T]: T[K] extends Field<infer U> ? U : never;\n};\n\n/**\n * Struct declaration\n *\n * Used for serializing/deserializing structs\n */\nexport interface Struct<F extends Fields> {\n    /**\n     * Get size of buffer\n     *\n     * If `view` not passed, returns minimal required size of buffer (because strings have dynamic size)\n     *\n     * @returns {number} required size of buffer\n     */\n    size(view: DataView): number,\n\n    /**\n     * Serialize struct\n     *\n     * @param view {DataView} data view\n     * @param data {InferFieldsValues<F>} data to serialize\n     *\n     * @returns {number} length of serialized data\n     */\n    serialize(view: DataView, data: InferFieldsValues<F>): number\n    deserialize(view: DataView, position?: number): InferFieldsValues<F>\n}\n\n/**\n*\n* @param fields {{[name: string]: Field }}\n* @returns {Struct} created struct declaration\n*/\nexport function createStruct<F extends Fields>(fields: F): Struct<F> {\n    return {\n        size(view?: DataView) {\n            let size = 0\n\n            for (const [_fieldName, fieldType] of Object.entries(fields)) {\n                size += fieldType.size(view, size)\n            }\n\n            return size\n        },\n\n        serialize(view: DataView, data: InferFieldsValues<F>, position = 0) {\n            const initialPosition = position;\n\n            for (const [fieldName, fieldType] of Object.entries(fields)) {\n                position += fieldType.serialize(view, position, data[fieldName])\n            }\n\n            return position - initialPosition\n        },\n\n        deserialize(view, position = 0) {\n            let result: Record<string, any> = {}\n\n            for (const [fieldName, fieldType] of Object.entries(fields)) {\n                const { data, length } = fieldType.deserialize(view, position)\n\n                result[fieldName] = data\n                position += length\n            }\n\n            return result as InferFieldsValues<F>\n        }\n    }\n}\n\n\n// Field Types\n\nexport const i8 = (): Field<number> => {\n    return {\n        size(_view, _position): number {\n            return 1\n        },\n        serialize(view, position, value) {\n            view.setInt8(position, value)\n            return 1\n        },\n        deserialize(view, position) {\n            return {\n                data: view.getInt8(position),\n                length: 1\n            }\n        }\n    }\n}\n\nexport const u8 = (): Field<number> => {\n    return {\n        size(_view, _position): number {\n            return 1\n        },\n        serialize(view, position, value) {\n            view.setUint8(position, value)\n            return 1\n        },\n        deserialize(view, position) {\n            return {\n                data: view.getUint8(position),\n                length: 1\n            }\n        }\n    }\n}\n\nexport const i16 = (): Field<number> => {\n    return {\n        size(_view, _position): number {\n            return 2\n        },\n        serialize(view, position, value) {\n            view.setInt16(position, value)\n            return 2\n        },\n        deserialize(view, position) {\n            return {\n                data: view.getInt16(position),\n                length: 2\n            }\n        }\n    }\n}\n\nexport const u16 = (): Field<number> => {\n    return {\n        size(_view, _position): number {\n            return 2\n        },\n        serialize(view, position, value) {\n            view.setUint16(position, value)\n            return 2\n        },\n        deserialize(view, position) {\n            return {\n                data: view.getUint16(position),\n                length: 2\n            }\n        }\n    }\n}\n\nexport const i32 = (): Field<number> => {\n    return {\n        size(_view, _position): number {\n            return 4\n        },\n        serialize(view, position, value) {\n            view.setInt32(position, value)\n            return 4\n        },\n        deserialize(view, position) {\n            return {\n                data: view.getInt32(position),\n                length: 4\n            }\n        }\n    }\n}\n\nexport const u32 = (): Field<number> => {\n    return {\n        size(_view, _position): number {\n            return 4\n        },\n        serialize(view, position, value) {\n            view.setUint32(position, value)\n            return 4\n        },\n        deserialize(view, position) {\n            return {\n                data: view.getUint32(position),\n                length: 4\n            }\n        }\n    }\n}\n\nexport const f32 = (): Field<number> => {\n    return {\n        size(_view, _position): number {\n            return 4\n        },\n        serialize(view, position, value) {\n            view.setFloat32(position, value)\n            return 4\n        },\n        deserialize(view, position) {\n            return {\n                data: view.getFloat32(position),\n                length: 4\n            }\n        }\n    }\n}\n\nexport const f64 = (): Field<number> => {\n    return {\n        size(_view, _position): number {\n            return 4\n        },\n        serialize(view, position, value) {\n            view.setFloat64(position, value)\n            return 4\n        },\n        deserialize(view, position) {\n            return {\n                data: view.getFloat64(position),\n                length: 4\n            }\n        }\n    }\n}\n\n/**\n * String field (dynamic)\n *\n * Up to 255 characters long\n *\n * @returns {Field<string>}\n */\nexport const string = (): Field<string> => {\n    return {\n        size(view, position = 0): number {\n            if (view) {\n                return view.getUint8(position) + 1\n            } else {\n                return 1\n            }\n        },\n\n        serialize(view, position, value) {\n            view.setUint8(position, value.length)\n\n            const chars = value\n                .split(\"\")\n                .map((_, i) => [i, value.charCodeAt(i)])\n            for (const [offset, char] of chars) {\n                view.setUint8(position + offset + 1, char)\n            }\n\n            return value.length + 1\n        },\n\n        deserialize(view, position) {\n            const length = view.getUint8(position)\n            let chars = []\n\n            for (let offset = 0; offset < length; offset++) {\n                chars.push(view.getUint8(position + offset + 1))\n            }\n\n            return {\n                data: String.fromCodePoint(...chars),\n                length: length + 1\n            }\n        }\n    }\n}\n\n/**\n * Long String field (dynamic)\n *\n * Up to 65536 characters long\n *\n * @returns {Field<string>}\n */\nexport const longString = (): Field<string> => {\n    return {\n        size(view, position = 0): number {\n            if (view) {\n                return view.getUint16(position) + 1\n            } else {\n                return 1\n            }\n        },\n\n        serialize(view, position, value) {\n            view.setUint16(position, value.length)\n\n            const chars = value\n                .split(\"\")\n                .map((_, i) => [i, value.charCodeAt(i)])\n            for (const [offset, char] of chars) {\n                view.setUint8(position + offset + 1, char)\n            }\n\n            return value.length + 1\n        },\n\n        deserialize(view, position) {\n            const length = view.getUint16(position)\n            let chars = []\n\n            for (let offset = 0; offset < length; offset++) {\n                chars.push(view.getUint8(position + offset + 1))\n            }\n\n            return {\n                data: String.fromCodePoint(...chars),\n                length: length + 1\n            }\n        }\n    }\n}\n\n/**\n * Array field (dynamic)\n *\n * Up to 255 element long\n *\n * @returns {Field<T>}\n */\nexport const array = <T>(type: Field<T>): Field<T[]> => {\n    return {\n        size(view, position = 0) {\n            if (view) {\n                return type.size(view, position) + 1\n            } else {\n                return 1\n            }\n        },\n\n        serialize(view, position, array) {\n            view.setUint8(position, array.length)\n\n            let offset = 0\n            for (const value of array) {\n                offset += type.serialize(view, position + offset + 1, value)\n            }\n\n            return offset + 1\n        },\n\n        deserialize(view, position) {\n            const length = view.getUint8(position)\n\n            let array = []\n            let offset = 0\n            for (let i = 0; i < length; i++) {\n                const { data, length } = type.deserialize(view, position + offset + 1)\n                array.push(data)\n                offset += length\n            }\n\n            return {\n                data: array,\n                length: offset\n            }\n        }\n    }\n}\n\n/**\n * Long Array field (dynamic)\n *\n * Up to 65536 element long\n *\n * @returns {Field<T>}\n */\nexport const longArray = <T>(type: Field<T>): Field<T[]> => {\n    return {\n        size(view, position = 0) {\n            if (view) {\n                return type.size(view, position) + 1\n            } else {\n                return 1\n            }\n        },\n\n        serialize(view, position, array) {\n            view.setUint16(position, array.length)\n\n            let offset = 0\n            for (const value of array) {\n                offset += type.serialize(view, position + offset + 1, value)\n            }\n\n            return offset + 1\n        },\n\n        deserialize(view, position) {\n            const length = view.getUint16(position)\n\n            let array = []\n            let offset = 0\n            for (let i = 0; i < length; i++) {\n                const { data, length } = type.deserialize(view, position + offset + 1)\n                array.push(data)\n                offset += length\n            }\n\n            return {\n                data: array,\n                length: offset\n            }\n        }\n    }\n}\n"],"names":["type","size","view","position","serialize","array","setUint8","length","offset","value","deserialize","getUint8","i","data","push","fields","_fieldName","fieldType","Object","entries","initialPosition","fieldName","result","_view","_position","setFloat32","getFloat32","setFloat64","getFloat64","setInt16","getInt16","setInt32","getInt32","setInt8","getInt8","setUint16","getUint16","chars","split","map","_","charCodeAt","char","String","fromCodePoint","setUint32","getUint32"],"mappings":"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"}