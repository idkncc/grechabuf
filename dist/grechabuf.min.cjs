"use strict";exports.array=e=>({size:(t,i=0)=>t?e.size(t,i)+1:1,serialize(t,i,s){t.setUint8(i,s.length);let r=0;for(const n of s)r+=e.serialize(t,i+r+1,n);return r+1},deserialize(t,i){const s=t.getUint8(i);let r=[],n=0;for(let a=0;a<s;a++){const{data:s,length:a}=e.deserialize(t,i+n+1);r.push(s),n+=a}return{data:r,length:n}}}),exports.createStruct=function(e){return{size(t){let i=0;for(const[s,r]of Object.entries(e))i+=r.size(t,i);return i},serialize(t,i,s=0){const r=s;for(const[r,n]of Object.entries(e))s+=n.serialize(t,s,i[r]);return s-r},deserialize(t,i=0){let s={};for(const[r,n]of Object.entries(e)){const{data:e,length:a}=n.deserialize(t,i);s[r]=e,i+=a}return s}}},exports.f32=()=>({size:(e,t)=>4,serialize:(e,t,i)=>(e.setFloat32(t,i),4),deserialize:(e,t)=>({data:e.getFloat32(t),length:4})}),exports.f64=()=>({size:(e,t)=>4,serialize:(e,t,i)=>(e.setFloat64(t,i),4),deserialize:(e,t)=>({data:e.getFloat64(t),length:4})}),exports.i16=()=>({size:(e,t)=>2,serialize:(e,t,i)=>(e.setInt16(t,i),2),deserialize:(e,t)=>({data:e.getInt16(t),length:2})}),exports.i32=()=>({size:(e,t)=>4,serialize:(e,t,i)=>(e.setInt32(t,i),4),deserialize:(e,t)=>({data:e.getInt32(t),length:4})}),exports.i8=()=>({size:(e,t)=>1,serialize:(e,t,i)=>(e.setInt8(t,i),1),deserialize:(e,t)=>({data:e.getInt8(t),length:1})}),exports.longArray=e=>({size:(t,i=0)=>t?e.size(t,i)+1:1,serialize(t,i,s){t.setUint16(i,s.length);let r=0;for(const n of s)r+=e.serialize(t,i+r+1,n);return r+1},deserialize(t,i){const s=t.getUint16(i);let r=[],n=0;for(let a=0;a<s;a++){const{data:s,length:a}=e.deserialize(t,i+n+1);r.push(s),n+=a}return{data:r,length:n}}}),exports.longString=()=>({size:(e,t=0)=>e?e.getUint16(t)+1:1,serialize(e,t,i){e.setUint16(t,i.length);const s=i.split("").map(((e,t)=>[t,i.charCodeAt(t)]));for(const[i,r]of s)e.setUint8(t+i+1,r);return i.length+1},deserialize(e,t){const i=e.getUint16(t);let s=[];for(let r=0;r<i;r++)s.push(e.getUint8(t+r+1));return{data:String.fromCodePoint(...s),length:i+1}}}),exports.string=()=>({size:(e,t=0)=>e?e.getUint8(t)+1:1,serialize(e,t,i){e.setUint8(t,i.length);const s=i.split("").map(((e,t)=>[t,i.charCodeAt(t)]));for(const[i,r]of s)e.setUint8(t+i+1,r);return i.length+1},deserialize(e,t){const i=e.getUint8(t);let s=[];for(let r=0;r<i;r++)s.push(e.getUint8(t+r+1));return{data:String.fromCodePoint(...s),length:i+1}}}),exports.u16=()=>({size:(e,t)=>2,serialize:(e,t,i)=>(e.setUint16(t,i),2),deserialize:(e,t)=>({data:e.getUint16(t),length:2})}),exports.u32=()=>({size:(e,t)=>4,serialize:(e,t,i)=>(e.setUint32(t,i),4),deserialize:(e,t)=>({data:e.getUint32(t),length:4})}),exports.u8=()=>({size:(e,t)=>1,serialize:(e,t,i)=>(e.setUint8(t,i),1),deserialize:(e,t)=>({data:e.getUint8(t),length:1})});
//# sourceMappingURL=grechabuf.min.cjs.map
